/**
 * Transactions API
 * This is an API designed for a bank transactions coding challenge. It has not been properly tested and was designed more as a proof of concept
 *
 * OpenAPI spec version: 1.0.0
 * Contact: maxcan7@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transactions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Transactions'));
  } else {
    // Browser globals (root is window)
    if (!root.TransactionsApi) {
      root.TransactionsApi = {};
    }
    root.TransactionsApi.BankAdminApi = factory(root.TransactionsApi.ApiClient, root.TransactionsApi.Transactions);
  }
}(this, function(ApiClient, Transactions) {
  'use strict';

  /**
   * BankAdmin service.
   * @module api/BankAdminApi
   * @version 1.0.0
   */

  /**
   * Constructs a new BankAdminApi. 
   * @alias module:api/BankAdminApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the searchTransactions operation.
     * @callback module:api/BankAdminApi~searchTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transactions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches account transactions
     * By passing in the appropriate options, you can search for transaction history 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up transactions
     * @param {Number} opts.skip number of transactions to skip for pagination
     * @param {Number} opts.limit maximum number of transactions to return
     * @param {module:api/BankAdminApi~searchTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transactions>}
     */
    this.searchTransactions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Transactions];

      return this.apiClient.callApi(
        '/transfer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
